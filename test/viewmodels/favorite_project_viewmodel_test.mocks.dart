// Mocks generated by Mockito 5.4.4 from annotations
// in kanban_board_innoscripta/test/viewmodels/favorite_project_viewmodel_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'package:kanban_board_innoscripta/models/project_model.dart' as _i3;
import 'package:kanban_board_innoscripta/services/projects_service.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [ProjectsService].
///
/// See the documentation for Mockito's code generation for more information.
class MockProjectsService extends _i1.Mock implements _i2.ProjectsService {
  MockProjectsService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  List<_i3.ProjectModel> get projects => (super.noSuchMethod(
        Invocation.getter(#projects),
        returnValue: <_i3.ProjectModel>[],
      ) as List<_i3.ProjectModel>);

  @override
  set projects(List<_i3.ProjectModel>? _projects) => super.noSuchMethod(
        Invocation.setter(
          #projects,
          _projects,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set selectedProject(_i3.ProjectModel? _selectedProject) => super.noSuchMethod(
        Invocation.setter(
          #selectedProject,
          _selectedProject,
        ),
        returnValueForMissingStub: null,
      );

  @override
  void deleteProject(String? projectId) => super.noSuchMethod(
        Invocation.method(
          #deleteProject,
          [projectId],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void toggleFavorite(String? projectId) => super.noSuchMethod(
        Invocation.method(
          #toggleFavorite,
          [projectId],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void updateProject(_i3.ProjectModel? updatedProject) => super.noSuchMethod(
        Invocation.method(
          #updateProject,
          [updatedProject],
        ),
        returnValueForMissingStub: null,
      );
}
